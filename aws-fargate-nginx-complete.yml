AWSTemplateFormatVersion: '2010-09-09'
Description: A stack for deploying containerized applications in AWS Fargate.
  This stack runs containers in a public VPC subnet, and includes a
  public facing load balancer to register the services in.

# Parametes for ECS services
Parameters:
  StackName:
    Type: String
    Description: The name of the networking stack that
      these resources are put into.
  ServiceName:
    Type: String
    Description: A human-readable name for the service.
  HealthCheckPath:
    Type: String
    Default: /
    Description: Path to perform the healthcheck on each instance.
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU.
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container.
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
      should be connected to.

Resources:

# VPC
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: '10.10.0.0/22'

# Public Subents
    PublicSubnetOne:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: { Ref: 'AWS::Region' }
        VpcId: !Ref 'VPC'
        CidrBlock: '10.10.0.0/24'
        MapPublicIpOnLaunch: true

    PublicSubnetTwo:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: { Ref: 'AWS::Region' }
        VpcId: !Ref 'VPC'
        CidrBlock: '10.10.1.0/24'
        MapPublicIpOnLaunch: true

# Private Subnets
    PrivateSubnetOne:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
            - 0
            - Fn::GetAZs: { Ref: 'AWS::Region' }
        VpcId: !Ref 'VPC'
        CidrBlock: '10.10.2.0/24'

    PrivateSubnetTwo:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone:
          Fn::Select:
            - 1
            - Fn::GetAZs: { Ref: 'AWS::Region' }
        VpcId: !Ref 'VPC'
        CidrBlock: '10.10.3.0/24'

# Internet Gateway
    InternetGateway:
      Type: AWS::EC2::InternetGateway

    GatewayAttachement:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref 'VPC'
        InternetGatewayId: !Ref 'InternetGateway'

# Route Tables
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref 'VPC'

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref 'VPC'

# Public Route to internet gateway
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: GatewayAttachement
      Properties:
        RouteTableId: !Ref 'PublicRouteTable'
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref 'InternetGateway'

# Route Tables associations
    PublicSubnetOneRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetOne
        RouteTableId: !Ref PublicRouteTable

    PublicSubnetTwoRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetTwo
        RouteTableId: !Ref PublicRouteTable

    PrivateSubnetOneRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetOne
        RouteTableId: !Ref PrivateRouteTable

    PrivateSubnetTwoRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetTwo
        RouteTableId: !Ref PrivateRouteTable

# Load Balancer Security Group
    PublicLoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to the public facing load balancer
        VpcId: !Ref 'VPC'

    PublicLoadBalancerSecurityGroupIngressMyIp:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Ingress from the public ALB
        GroupId: !Ref 'PublicLoadBalancerSecurityGroup'
        IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0    # change with your IP

    PublicLoadBalancerSecurityGroupIngressStaticIP:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Ingress from the public ALB
        GroupId: !Ref 'PublicLoadBalancerSecurityGroup'
        IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        CidrIp: 38.88.200.202/32

  # Load Balancer
    PublicLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing
        Subnets:
          - !Ref PublicSubnetOne
          - !Ref PublicSubnetTwo
        SecurityGroups: [!Ref 'PublicLoadBalancerSecurityGroup']

# Dummy Target Group
    DummyTargetGroupPublic:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        Name: !Join ['-', [!Ref 'AWS::StackName', 'dummy-tg']]
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 2
        VpcId: !Ref 'VPC'

# HTTP Load Balnacer Listener
    PublicLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      DependsOn:
        - PublicLoadBalancer
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
            Type: 'forward'
        LoadBalancerArn: !Ref 'PublicLoadBalancer'
        Port: 80
        Protocol: HTTP

# ECS Cluster
    ECSCluster:
      Type: AWS::ECS::Cluster

# ECS Security Group
    ECSSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to the ECS containers
        VpcId: !Ref 'VPC'

# ECS ingress from public ALB
    ECSSecurityGroupIngressFromPublicALB:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Ingress from the public ALB
        GroupId: !Ref 'ECSSecurityGroup'
        IpProtocol: "tcp"
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref 'PublicLoadBalancerSecurityGroup'

# ECS IAM Roles
    ECSRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ecs.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: ecs-service
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'ec2:AttachNetworkInterface'
                    - 'ec2:CreateNetworkInterface'
                    - 'ec2:CreateNetworkInterfacePermission'
                    - 'ec2:DeleteNetworkInterface'
                    - 'ec2:DeleteNetworkInterfacePermission'
                    - 'ec2:Describe*'
                    - 'ec2:DetachNetworkInterface'
                    - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                    - 'elasticloadbalancing:DeregisterTargets'
                    - 'elasticloadbalancing:Describe*'
                    - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                    - 'elasticloadbalancing:RegisterTargets'
                  Resource: '*'

# ECS Task execution Role
    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: [ecs-tasks.amazonaws.com]
              Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: AmazonECSTaskExecutionRolePolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: '*'


# ECS Target Group

    ECSTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: !Ref 'HealthCheckPath'
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetType: ip
        Name: !Ref 'ServiceName'
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 2
        VpcId: !Ref 'VPC'


    LoadBalancerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - TargetGroupArn: !Ref 'ECSTargetGroup'
            Type: 'forward'
        Conditions:
          - Field: path-pattern
            Values: [!Ref 'Path']
        ListenerArn: !Ref 'PublicLoadBalancerListener'
        Priority: 1

# ECS Task Definition
    TaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: !Ref 'ServiceName'
        Cpu: !Ref 'ContainerCpu'
        Memory: !Ref 'ContainerMemory'
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
        ContainerDefinitions:
          - Name: !Ref 'ServiceName'
            Cpu: !Ref 'ContainerCpu'
            Memory: !Ref 'ContainerMemory'
            Image: 'nginx:latest'
            PortMappings:
              - ContainerPort: 80
            LogConfiguration:
              LogDriver: 'awslogs'
              Options:
                awslogs-group: !Ref 'ServiceName'
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: !Ref 'ServiceName'

    CloudWatchLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Ref 'ServiceName'
        RetentionInDays: 7

# ECS Service
    Service:
      Type: AWS::ECS::Service
      DependsOn: LoadBalancerRule
      Properties:
        ServiceName: !Ref 'ServiceName'
        Cluster: !Ref 'ECSCluster'
        LaunchType: FARGATE
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 50
        DesiredCount: 2
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            SecurityGroups:
              - !Ref 'ECSSecurityGroup'
            Subnets:
              - !Ref 'PublicSubnetOne'
              - !Ref 'PublicSubnetTwo'
        TaskDefinition: !Ref 'TaskDefinition'
        LoadBalancers:
          - ContainerName: !Ref 'ServiceName'
            ContainerPort: 80
            TargetGroupArn: !Ref 'ECSTargetGroup'

# ECS Autoscale policy
    ScalableTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: 5
        MinCapacity: 2
        ResourceId: !Join
          - /
          - - service
            - !Ref 'ECSCluster'
            - !GetAtt Service.Name
        RoleARN:
          Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
        ScalableDimension: 'ecs:service:DesiredCount'
        ServiceNamespace: 'ecs'

    TargetTrackingScalingPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: cpu40-target-tracking-scaling-policy
        PolicyType: TargetTrackingScaling
        ScalingTargetId: !Ref 'ScalableTarget'
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 40.0
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: ECSServiceAverageCPUUtilization

# IAM User for deployment
    ECSDeploymentGroup:
      Type: AWS::IAM::Group
      Properties:
        GroupName: 'ECSDeploymentGroup'

    ECSDeploymentPolicy:
      Type: 'AWS::IAM::Policy'
      Properties:
        PolicyName: 'ECSDeploymentPolicy'
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'ecs:*'
                - 'ec2:*'
              Resource: '*'
        Groups:
          - !Ref 'ECSDeploymentGroup'

    ECSDeploymentUser:
      Type: AWS::IAM::User
      Properties:
        Groups:
          - !Ref 'ECSDeploymentGroup'
        UserName: 'ecs-deployment'
